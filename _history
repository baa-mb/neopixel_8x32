{"entries":[{"timestamp":1730639584447,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"KwR/Y6JHQPj+Uu,YLh}R\" x=\"0\" y=\"0"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":133,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"r8(Tp|K@N1x5e@;bXC*g\" x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":48,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * ende Initialisierung\n */\n/**\n * test();\n */\n/**\n * zerlege()\n */\nfunction set_system(sname: string) {\n    if (sname == \"wolf\") {\n        basic.showString(\"W\")\n    }\n}\nfunction set_helligkeit(helligkeit: number, zch_pause: number) {\n    strip_helligkeit = helligkeit\n    strip_pause = zch_pause\n    // console.log(\"helligkeit\"+strip_helligkeit)\n    for (let i = 0; i <= neo_strip_anzahl - 1; i++) {\n        arr_neop_strips[i].setBrightness(strip_helligkeit)\n    }\n}\nfunction loesche_matrix(snr: number) {\n\n    arr_neop_strips[snr].clear()\n    arr_neop_strips[snr].show()\n}\n\n\nfunction init_alphabet() {\n    // bstreihenfolge einhalten\n    bst_reihe = \"? ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü0123456789!?.,*+-=≠:%abcdefghijklmnopqrstuvwxyz#$&()/@;<>[]|{}~€\";\n\n    arr_zeichen = [\n        [14, 17, 1, 2, 4, 0, 4, 0], //?\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [14, 17, 17, 31, 17, 17, 17, 0], //A\n        [30, 17, 17, 30, 17, 17, 30, 0],\n        [14, 17, 16, 16, 16, 17, 14, 0],\n        [30, 17, 17, 17, 17, 17, 30, 0],//D\n        [31, 16, 16, 30, 16, 16, 31, 0],\n        [31, 16, 16, 30, 16, 16, 16, 0],\n        [14, 17, 16, 23, 17, 17, 14, 0],\n        [17, 17, 17, 31, 17, 17, 17, 0],\n        [14, 4, 4, 4, 4, 4, 14, 0],\n        [15, 2, 2, 2, 2, 18, 12, 0],\n        [17, 18, 20, 24, 20, 18, 17, 0], //K\n        [16, 16, 16, 16, 16, 16, 31, 0],\n        [17, 27, 21, 21, 17, 17, 17, 0],\n        [17, 17, 25, 21, 19, 17, 17, 0],\n        [14, 17, 17, 17, 17, 17, 14, 0],\n        [30, 17, 17, 30, 16, 16, 16, 0],\n        [14, 17, 17, 17, 21, 18, 13, 0],\n        [30, 17, 17, 30, 20, 18, 17, 0],\n        [14, 17, 16, 14, 1, 17, 14, 0],\n        [31, 4, 4, 4, 4, 4, 4, 0],       //T\n        [17, 17, 17, 17, 17, 17, 14, 0],\n        [17, 17, 17, 17, 17, 10, 4, 0],\n        [17, 17, 17, 21, 21, 27, 17, 0],\n        [17, 17, 10, 4, 10, 17, 17, 0],\n        [17, 17, 10, 4, 4, 4, 4, 0],\n        [31, 1, 2, 4, 8, 16, 31, 0], //Z\n        [10, 0, 14, 17, 31, 17, 17, 0], //Ä\n        [10, 0, 14, 17, 17, 17, 14, 0], //Ö\n        [10, 0, 17, 17, 17, 17, 14, 0], //Ü\n        [10, 0, 14, 1, 15, 17, 15, 0], //ä\n        [0, 10, 0, 14, 17, 17, 14, 0], //ö\n        [0, 10, 0, 17, 17, 17, 14, 0], //ü\n\n        [14, 17, 19, 21, 25, 17, 14, 0], //0\n        [4, 12, 4, 4, 4, 4, 14, 0],\n        [14, 17, 1, 2, 4, 8, 31, 0],\n        [31, 2, 4, 2, 1, 17, 14, 0],\n        [2, 6, 10, 18, 31, 2, 2, 0],\n        [31, 16, 30, 1, 1, 17, 14, 0],\n        [6, 8, 16, 30, 17, 17, 14, 0],\n        [31, 1, 2, 4, 4, 4, 4, 0],\n        [14, 17, 17, 14, 17, 17, 14, 0],\n        [14, 17, 17, 15, 1, 2, 12, 0],//9\n\n        [4, 4, 4, 4, 4, 0, 4, 0], //!\n        [14, 17, 1, 2, 4, 0, 4, 0], //?\n        [0, 0, 0, 0, 0, 12, 12, 0], //.\n        [0, 0, 0, 0, 0, 12, 12, 4], //,\n        [0, 0, 4, 21, 14, 21, 4, 0], //*\n        [0, 0, 4, 4, 31, 4, 4, 0], //+\n        [0, 0, 0, 0, 31, 0, 0, 0], //-\n        [0, 0, 0, 31, 0, 31, 0, 0], //=\n        [1, 2, 31, 4, 31, 8, 16, 0], //\n        [0, 0, 12, 12, 0, 12, 12, 0], //:\n        [24, 25, 2, 4, 8, 19, 3, 0], //%\n\n        [0, 0, 14, 1, 15, 17, 31, 0],//a\n        [16, 16, 22, 25, 17, 17, 14, 0], //b\n        [0, 0, 15, 16, 16, 16, 15, 0], //c\n        [1, 1, 13, 19, 17, 17, 15, 0], //d\n        [0, 0, 14, 17, 31, 16, 14, 0], //e\n        [2, 5, 4, 14, 4, 4, 4, 4], //f\n        [0, 0, 15, 17, 17, 15, 1, 14], //g\n        [16, 16, 22, 25, 17, 17, 17, 0], //h\n        [4, 0, 12, 4, 4, 4, 14, 0], //i\n        [2, 0, 2, 2, 2, 2, 10, 4], //j\n        [8, 8, 9, 10, 12, 10, 9, 0], //k\n        [12, 4, 4, 4, 4, 4, 14, 0], //l\n        [0, 0, 26, 21, 21, 21, 21, 0],//m\n        [0, 0, 22, 25, 17, 17, 17, 0], //n\n        [0, 0, 14, 17, 17, 17, 14, 0], //o\n        [0, 0, 30, 17, 17, 30, 16, 16], //p\n        [0, 0, 15, 17, 17, 15, 1, 1], //q\n        [0, 0, 11, 12, 8, 8, 8, 0], //r\n        [0, 0, 15, 16, 14, 1, 30, 0], //s\n        [4, 14, 4, 4, 4, 5, 2, 0], //t\n        [0, 0, 17, 17, 17, 19, 13, 0], //u\n        [0, 0, 17, 17, 17, 10, 4, 0], //v\n        [0, 0, 17, 17, 17, 21, 10, 0], //w\n        [0, 0, 17, 10, 4, 10, 17, 0], //x\n        [0, 0, 17, 9, 6, 4, 8, 16], //y\n        [0, 0, 31, 2, 4, 8, 31, 0], //z\n        [10, 10, 31, 10, 31, 10, 10, 0],\n        [4, 15, 20, 14, 5, 30, 4, 0],\n        [12, 18, 20, 8, 21, 18, 13, 0],\n        [4, 8, 16, 16, 16, 8, 4, 0],\n        [4, 2, 1, 1, 1, 2, 4, 0],\n        [1, 2, 4, 8, 16, 0, 0, 0],\n        [14, 17, 1, 9, 21, 21, 14, 0],\n        [0, 12, 12, 0, 12, 4, 8, 0],\n        [2, 4, 8, 16, 8, 4, 2, 0],\n        [8, 4, 2, 1, 2, 4, 8, 0],\n        [14, 8, 8, 8, 8, 8, 14, 0],\n        [14, 2, 2, 2, 2, 2, 14, 0],\n        [4, 4, 4, 4, 4, 4, 4, 0],\n        [6, 8, 8, 16, 8, 8, 6, 0],\n        [12, 2, 2, 1, 2, 2, 12, 0],\n        [0, 0, 8, 21, 2, 0, 0, 0],\n        [6, 9, 28, 8, 28, 9, 6, 0]\n    ]\n\n\n}\n\n// }\ninput.onButtonPressed(Button.A, function () {\n    power.fullPowerOn(FullPowerSource.A)\n    strip_helligkeit = Math.min(strip_helligkeit + 25, 255);;\n    arr_neop_strips[0].setBrightness(strip_helligkeit)\n    basic.showNumber(strip_helligkeit);\n    automat = !automat;\n})\n\ninput.onButtonPressed(Button.B, function () {\n    strip_helligkeit = Math.max(strip_helligkeit - 25, 25);\n    arr_neop_strips[0].setBrightness(strip_helligkeit)\n    basic.showNumber(strip_helligkeit);\n    arr_neop_strips[sss].rotate(-16); arr_neop_strips[sss].show();\n})\n\ninput.onButtonPressed(Button.AB, function () {\n    let s = 0\n    // for (let s=0;s<neo_strip_anz;s++) {\n    arr_neop_strips[s].clear()\n    arr_neop_strips[s].show()\n})\n\n\n// muss sein, damit der index nicht fehlläuft\nfunction default_strip_data() {\n    arr_neop_settings.push({ pin: arr_tech_pin[0], hwMatrix: arr_tech_matrix[0] })\n    // arr_neop_settings.push({ pin: arr_tech_pin[1], hwMatrix: arr_tech_matrix[1] })\n    // arr_neop_settings.push({ pin: arr_tech_pin[2], hwMatrix: arr_tech_matrix[1] })\n}\n\nfunction randColor() {\n    return [NeoPixelColors.Red, NeoPixelColors.Green, NeoPixelColors.Blue, NeoPixelColors.Yellow][Math.randomRange(0, 3)]\n}\n\nfunction zufallsFarbe(): number {\n    let rot = Math.randomRange(0, 255)\n    let gruen = Math.randomRange(0, 255)\n    let blau = Math.randomRange(0, 255)\n    return neopixel.rgb(rot, gruen, blau)\n}\n\n\n// set_helligkeit(80, 5000)\n// testbetrieb\nfunction test(snr: number, txt: string) {\n    // init_strip(0, 0, 0)\n    // set_helligkeit(40, 1000)\n    // neop_scroll_zch(0, \"ABCDEFGHIJKLMNOabcdefgh\", NeoPixelColors.Green, -3)\n    // neop_schreibe_zch(0,\"B CA\",NeoPixelColors.Red)\n\n    // basic.showNumber(neo_strip_anzahl)\n\n    neop_schreibe_zch(snr, txt, randColor())\n}\n\nfunction init_strip(pin: number, nrMatrix: number, hwMatrix: number) {\n    arr_neop_settings[nrMatrix].pin = pin;\n    arr_neop_settings[nrMatrix].hwMatrix = arr_tech_matrix[hwMatrix];\n    pixelAnzahl = arr_tech_matrix[nrMatrix][0] * arr_tech_matrix[nrMatrix][1]\n\n    // pixelAnzahl = breite;\n    let strip = neopixel.create(arr_tech_pin[pin], pixelAnzahl, NeoPixelMode.RGB)\n    strip.setBrightness(strip_helligkeit)\n    arr_neop_strips[nrMatrix] = strip\n\n    strip.clear()\n    strip.show()\n\n    // neo_strip_anzahl = Math.max(nrMatrix + 1, neo_strip_anzahl)\n    neo_strip_anzahl = 1;\n\n\n}\n\n\nlet sss = 0;\nlet automat = false;\nlet pixelAnzahl = 0\nlet neo_strip_anzahl = 0\nlet strip_pause = 0\nlet strip_helligkeit = 0\nlet arr_tech_matrix: number[][] = []\n\nlet arr_neop_settings: Array<neop> = []\nlet arr_neop_strips: Array<neopixel.Strip> = []\nlet shift: number = 0\n\n\n\nfunction neop_schreibe_zch(snr: number, zch_str: string = \"A\", color: number) {\n    let zeichen_matrix2: Array<number> = []\n\n    let mx2 = arr_neop_settings[snr].hwMatrix[0];\n    let my2 = arr_neop_settings[snr].hwMatrix[1];\n\n    my2 = zch_str.length;\n    arr_neop_settings[snr].hwMatrix[1] = my2 * 6;\n    init_strip(0, 0, 0)\n    // arr_neop_strips[snr].showRainbow(1, 360)\n\n    let myColor: number = color;\n    let is_type2 = 0; //buchstabe\n    sss = snr;\n    let zch_len2 = zch_str.length\n    if (zch_len2 > 1) {\n        is_type2 = 1; // wort\n        let arr_split2 = zch_str.split(\",\")\n        if (arr_split2.length > 2) {\n            is_type2 = 2; //array \n            zeichen_matrix2 = arr_split2.map(wert => parseInt(wert));\n            zch_len2 = 1;\n        }\n    }\n\n    arr_neop_strips[snr].clear()\n    arr_neop_strips[snr].show()\n    let mycolor = zufallsFarbe();\n\n    for (let o = 0; o < zch_len2; o++) {\n\n        // myColor = randColor();\n        let zch2: string;\n        if (is_type2 < 2) { //no array\n            zch2 = zch_str[o]\n            if (zch2 == \" \") {\n                myColor = randColor();\n            }\n            let found2 = bst_reihe.indexOf(zch2);\n            if (found2 == -1) {\n                found2 = 0;\n            }\n            zeichen_matrix2 = arr_zeichen[found2];\n        }\n        // arr_neop_strips[snr].clear()\n        // arr_neop_strips[snr].show()\n\n\n        // basic.showString(zch2)\n        zeichen_matrix2.forEach(function (zahl, zeile) {\n            for (let bit2 = 0; bit2 < mx2; bit2++) {\n                // let z = zeile, c = bit2 //7- minus\n                let c = zeile, z = bit2 //7- minus 2024\n                //b=z, z=bit\n                //b=z, z=mx-1-bit\n                if (zahl & Math.pow(2, (bit2 + shift + mx2) % mx2)) {\n                    // let px2 = z * mx2 + ((z % 2) ? (mx2 - 1 - c) : c)\n                    let px2 = z * mx2 + ((z % 2) == 0 ? (mx2 - 1 - c) : c)\n                    arr_neop_strips[snr].setPixelColor(px2, myColor);\n                    // arr_neop_strips[snr].showRainbow(1, 360)\n                    //    basic.showNumber(c)\n                }\n            }\n        })\n        arr_neop_strips[snr].show()\n        // arr_neop_strips[sss].show();\n        if (is_type2 == 1) {\n            pause(strip_pause)\n            // basic.showString(zch2)\n        }\n\n        arr_neop_strips[sss].rotate(16 * 3);\n        arr_neop_strips[sss].show();\n\n        // arr_neop_strips[snr].rotate(0);\n        // arr_neop_strips[snr].show();\n    }\n    automat = true;\n\n}\ninterface neop {\n    pin: number;\n    hwMatrix: Array<number>;\n}\n// hardwareeinstellungen ########################### 3 Matriken\n// entweder alte verdrahtung, dann 32 x 8 oder 8 x 32\narr_tech_matrix = [[8, 32], [8, 8], [5, 7], [16, 16]]\nlet arr_tech_pin = [\n    DigitalPin.P0,\n    DigitalPin.P1,\n    DigitalPin.P2,\n    // DigitalPin.P3,\n    // DigitalPin.P4,\n    // DigitalPin.P5,\n    // DigitalPin.P6,\n    // DigitalPin.P7,\n    // DigitalPin.P8\n]\n// hardwareeinstellungen end ###########################\nlet bst_muster = [\n    31,\n    31,\n    31,\n    31\n]\nlet bst_reihe: string = \"\";\nstrip_helligkeit = 25;\n// aucha scrollspeed\nstrip_pause = 300;\nlet arr_zeichen: number[][];\nneo_strip_anzahl = 1\n// ende variable\n// beginn initialisierung ############################\ninit_alphabet()\ndefault_strip_data()\nbasic.showIcon(IconNames.SmallDiamond)\n// test();\nconst vers = 2021;\n// test(\"ÄÖÜäöüabcdefghijklmnopqrstuvwxyz\");\n// test(\"fgjkpqyz\");\n// test(\"ABCabcöäü\")\n// test(0,\"Aber das ist falsch. \")\ntest(0, \"xDIGITALE GRUNDBILDUNG MIT DIGI.CASE - \")\n// test(0, \"Digitale Grundbildung mit Micro:bit * \")\n// test(\"Das ist eine gute Möglichkeite * \");\nlet runden: number = 0;\nconst max_runden: number = 2;\nbasic.forever(() => {\n    if (automat) {\n        arr_neop_strips[0].rotate(16 * 1);\n        arr_neop_strips[0].show();\n\n        // arr_neop_strips[1].rotate(16 * 1);\n        // arr_neop_strips[1].show();\n\n\n        basic.pause(strip_pause)\n        // arr_neop_strips[0].showRainbow(1, 360)\n        runden++;\n        if (runden >= max_runden) {\n            arr_neop_strips[0].clear();\n            arr_neop_strips[0].show();\n            basic.showString(\" \");\n            power.lowPowerRequest()\n        }\n    }\n})\n"],[0,"\n"]],"start1":0,"start2":0,"length1":11610,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"power\": \"github:microbit-foundation/pxt-microbit-v2-power#v0.2.3\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n"],[1,""],[0,"    "]],"start1":140,"start2":140,"length1":145,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1730639584446,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"neopixel_8x32\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1730639747304}